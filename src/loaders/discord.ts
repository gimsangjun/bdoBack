import { Command } from "./../discord/interaction/commands/index";
import { InteractionHandler } from "../discord/interaction/handler/index";
import {
  Client,
  Events,
  GatewayIntentBits,
  REST as DiscordRestClient,
  Routes,
  ChatInputCommandInteraction,
  Message,
  TextChannel,
} from "discord.js";
import config from "../config";
import ItemPriceAlertModel from "../models/itemPriceAlert";
import ItemStockModel from "../models/itemStock";

// export default loaderÎ°ú ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ìï¥ÏïºÌïòÎãàÍπå Î™®ÎìàÌôî?ÎùºÍ≥†Ìï¥ÏïºÌïòÎÇò..
export default class discordAppliaction {
  private client: Client; // ÎîîÏä§ÏΩîÎìúÎ¥á
  private discordRestClient: DiscordRestClient; // ÎîîÏä§ÏΩîÎìúÌïúÌÖå command Îì±Î°ùÌï†Îïå
  private interactionHandler: InteractionHandler;

  constructor() {
    // intent : ÏùòÏßÄ, Ïñ¥Îñ§ Ïù¥Î≤§Ìä∏Ïóê Î∞òÏùëÌï†ÏßÄ Î™ÖÌôïÌïòÍ≤å ÏßÄÏ†ïÌïòÎäî ÏÑ§Ï†ï
    // Îß®Ï≤òÏùå ÎîîÏä§ÏΩîÎìúÎ¥áÏùÑ Ï¥àÎåÄÌï† Îïå, permissionÏùÑ ÏÑ§Ï†ïÌïòÎäîÎç∞, ÌóàÍ∞ÄÎêòÏßÄ ÏïäÏùÄ intentÎ•º ÏöîÍµ¨ÌïòÎ©¥ Ïò§Î•òÎÇ®.
    this.client = new Client({
      intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.DirectMessages,
      ],
    });
  }
  async start() {
    try {
      // clientÎäî discord botÏù∏ÎìØ
      await this.client.login(config.DISCORD_BOT_TOKEN);
      this.discordRestClient = new DiscordRestClient().setToken(
        config.DISCORD_BOT_TOKEN,
      );
      this.interactionHandler = new InteractionHandler();
      this.addClientEventHandlers();
      await this.registerSlashCommands();

      // this.startMonitoring();
      // this.sendPriceAlert("ÏóòÏâ¨ Ïû•Í≤Ä", 80000, "742294333348118562");
    } catch (err) {
      console.log("Error starting bot", err);
    }
  }

  // Í≥µÏãùÎ¨∏ÏÑúÏóê Îì±Î°ù ÏòàÏãúÍ∞Ä 2Í∞úÍ∞Ä ÏûàÏùå. ÍººÍººÌûà Î≥¥Ïûê.
  // link : https://discordjs.guide/creating-your-bot/command-deployment.html#guild-commands
  async registerSlashCommands() {
    const commands = this.interactionHandler.getSlashCommands();
    try {
      const data: any = await this.discordRestClient.put(
        Routes.applicationCommands(config.DISCORD_APPLICATION_ID),
        {
          body: commands,
        },
      );
      console.log(
        `Successfully registered ${data.length} global application (/) commands:`,
        data.map((cmd: any) => cmd.name).join(", "),
      );
    } catch (err) {
      console.error("Error registering application (/) commands", err);
    }
  }

  addClientEventHandlers() {
    // interaction - ÏÉÅÌò∏ÏûëÏö©, InteractionsÎäî Î¥áÏù¥ Ïú†Ï†ÄÏôÄ ÏÉÅÌò∏ÏûëÏö©ÌïòÎäî Î∞©Ïãù
    // slash command Îì±Ïù¥ ÏûàÏùå
    this.client.on(Events.InteractionCreate, (interaction) => {
      this.interactionHandler.handleInteraction(
        interaction as ChatInputCommandInteraction,
      );
    });

    this.client.on(Events.ClientReady, () => {
      console.log("BDO bot client logged in");
    });

    this.client.on(Events.Error, (err: Error) => {
      console.error("Client error", err);
    });

    // ÌÖåÏä§Ìä∏ Ïö©ÎèÑ
    // this.client.on(Events.MessageCreate, async (message: Message) => {
    //   // console.log("Message received:", message);
    //   // ÌäπÏ†ï Ï±ÑÎÑêÏóêÏÑú Î©îÏãúÏßÄÎ•º ÏûëÏÑ±ÌñàÎäîÏßÄ ÌôïÏù∏
    //   console.log("channels", this.client.channels);
    //   const channel = this.client.channels.cache.get(message.channelId);
    //   // console.log("Channel:", channel);
    // });
  }

  // async sendPriceAlert(itemName: string, price: number, channelId: string) {
  //   // Ïñ¥Îäê Ï±ÑÎÑêÏóê Î≥¥ÎÇºÍ≤ÉÏù∏ÏßÄ, ÏÑúÎ≤Ñ(guild)ÏïàÏóê Ïó¨Îü¨Ï±ÑÎÑêÏù¥ ÏûàÏùå(Î≥¥Ïù¥Ïä§Ï±ÑÎÑê, ÌÖçÏä§Ìä∏Ï±ÑÎÑê Îì±)
  //   const channel = this.client.channels.cache.get(channelId) as TextChannel;
  //   if (!channel) {
  //     console.error("Channel not found:", channelId);
  //     return;
  //   }

  //   const message = `üîî **Price Alert** üîî\nItem **${itemName}** has reached the target price of **${price}**!`;
  //   await channel.send(message);
  // }

  // TODO: ÌïòÎ£®Ï¢ÖÏùº Î™®ÎãàÌÑ∞ÎßÅ ÌïòÎäîÍ±¥ ÎÇòÏ§ëÏóê, ÏùºÎã® slashcommandÎ•º ÌÜµÌï¥ ÏïåÎ¶ºÏùÑ Î∞õÏùÑÏàò ÏûàÎèÑÎ°ùÌïòÍ∏∞
  // startMonitoring() {
  //   const checkPrices = async () => {
  //     try {
  //       const alerts = await ItemPriceAlertModel.find({});
  //       for (const alert of alerts) {
  //         const item = await ItemStockModel.findOne({
  //           id: alert.itemId,
  //           sid: alert.itemSid,
  //         });

  //         if (item && item.basePrice >= alert.priceThreshold) {
  //           this.sendPriceAlert(
  //             item.name,
  //             item.basePrice,
  //             "742294333348118562", // Ï±ÑÎÑê ID
  //           );
  //         }
  //       }
  //     } catch (error) {
  //       console.error("Error checking item prices:", error);
  //     }
  //   };

  //   setInterval(checkPrices, 10000); // 60Ï¥àÎßàÎã§ Ï≤¥ÌÅ¨
  //   console.log("Started monitoring item prices.");
  // }
}
